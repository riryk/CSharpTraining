
-------------------------------------------------------------------
1. Why NoSQL?

The Value of Relational Databases
  - Getting at Persistent Data
  - Concurrency
  - Integration
  - A (Mostly) Standard Model

Issues:   
  Impedance mismatch: 
    the difference between the relational model and the in-memory data structures.
    The relational data model organizes data into a structure of tables and rows, 
	or more properly, relations and tuples.
  
  In particular, the values in a relational tuple have to be simple—they 
  cannot contain any structure, such as a nested record or a list.  
  
  This limitation isn’t true for in-memory data structures, which can take on much richer structures than relations. 
  As a result, if you want to use a richer in-memory data structure, 
  you have to translate it to a relational representation to store it on disk.

Why still alive: 
  Integration database—with multiple applications, usually developed by separate teams, 
  storing their data in a common database. 
  This improves communication because all the applications 
  are operating on a consistent set of persistent data.

Attacks of clusters:   
  This increase in scale was happening along many dimensions. 
  Websites started tracking activity and structure in a very detailed way. 
  Large sets of data appeared: 
    links, social networks, activity in logs, mapping data. 
  With this growth in data came a growth in users—as the biggest websites 
  grew to be vast estates regularly serving huge numbers of visitors.
  
The alternative is to use lots of small machines in a cluster. 
A cluster of small machines can use commodity hardware 
and ends up being cheaper at these kinds of scales. 
It can also be more resilient—while individual machine failures are common, 
the overall cluster can be built to keep going despite such failures, providing high reliability.

Relational databases are not designed to be run on clusters. 
Clustered relational databases, such as the Oracle RAC 
or Microsoft SQL Server, work on the concept of a shared disk subsystem.
Relational databases could also be run as separate servers for different sets of data, effectively sharding.

Commercial relational databases are usually priced on a single-server assumption, 
so running on a cluster raised prices and led 
to frustrating negotiations with purchasing departments.

Relational databases use ACID transactions to handle consistency across the whole database. 
NoSQL databases operate without a schema, 
allowing you to freely add fields to database records 
without having to define any changes in structure first.

Reasons to use NoSQL: 
 1. One is to handle data access with sizes and performance that demand a cluster; 
 2. the other is to improve the productivity of application development 
    by using a more convenient data interaction style.
 3. Impedance mismatch between the relational model and the in-memory data structures.	
 4. Move away from using databases as integration points.
 5. Support large volumes of data by running on clusters. 
    Relational databases are not designed to run efficiently on clusters.

---------------------------------------------------------------------------
Aggregate Data Models

An aggregate is a collection of related objects that we wish to treat as a unit. 
In particular, it is a unit for data manipulation and management of consistency.
Typically, we like to update aggregates with atomic operations 
and communicate with our data storage in terms of aggregates. 
This definition matches really well with how key-value, document, and column-family databases work.

Dealing in aggregates makes it much easier for these databases to handle operating on a cluster, 
since the aggregate makes a natural unit for replication and sharding. 





	











  
  

  
  
  

