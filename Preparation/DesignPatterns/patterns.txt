
1. Inheritance. 
Joe failed to notice that not all subclasses of Duck should fly

2. applying good OO software design principle
 
  - Design Principle
     Identify the aspects of your application that vary and separate them from what stays the same 
	 Take the parts that vary and encapsulate them, 
	 so that later you can alter or extend the parts that vary without affecting those that don’t
	 Let some part of a system vary independently of all other parts.
	 
  - Design Principle
     Program to an interface, not an implementation.	 
	 
  - Design Principle
     Favor composition over inheritance.	 
	 
3. Strategy pattern. 
 
Not only does it let you encapsulate a family of algorithms into their own set of classes, 
but it also lets you change behavior at runtime as long as 
the object you’re composing with implements the correct behavior interface. 

The Strategy Pattern defines a family of algorithms, 
encapsulates each one, and makes them interchangeable. 
Strategy lets the algorithm vary independently from clients that use it.

4. Observer. 

The Observer Pattern defines a one-to-many 
dependency between objects so that when one 
object changes state, all of its dependents are 
notified and updated automatically.

When two objects are loosely coupled, they can interact, 
but have very little knowledge of each other. 

Design Principle
Strive for loosely coupled designs 
between objects that interact.

5. Factory pattern.

There is more to making objects than just using the new operator. 
You’ll learn that instantiation is an activity that shouldn’t always 
be done in public and can often lead to coupling problems.

So, in other words, your code will not be “closed for modification.” 
To extend it with new concrete types, you’ll have to reopen it.

6. Factory method.

7. Flyweight Pattern.

Flyweight is a structural design pattern that lets you fit more objects 
into the available amount of RAM by sharing common parts of state 
between multiple objects instead of keeping all of the data in each object.

8. Adapter pattern. 

The Adapter pattern enables a system to use classes 
whose interfaces don’t quite match its requirements.
The Adapter pattern is found wherever there is code to be wrapped up 
and redirected to a different implementation.

You have:
 • A domain-specific interface.
 • A class to connect to with a mismatching interface.
You want to:
 • Create a reusable class to cooperate with yet-to-be-built  classes.
 • Change the names of methods as called and as implemented.
 • Support different sets of methods for different purposes

9. Façade Pattern.

The role of the Façade pattern is to provide different high-level views 
of subsystems whose details are hidden from users. 
In general, the operations that might be desirable 
from a user’s perspective could be made up of different selections of parts of the subsystems

What makes the Façade pattern different from, say, the Decorator or Adapter patterns 
is that the interface it builds up can be entirely new. 
It is not coupled to existing requirements, nor must it conform to existing interfaces.

A system has several identifiable subsystems and:
 • The abstractions and implementations of a subsystem are tightly coupled.
 • The system evolves and gets more complex, but early adopters might want to retain their simple views.
 • You want to provide alternative novice, intermediate, and “power user” interfaces.
 • There is a need for an entry point to each level of layered software.

Creational Patterns
10. Prototype. 





























 

