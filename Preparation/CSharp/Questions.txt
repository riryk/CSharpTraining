
https://habr.com/ru/companies/clrium/articles/439486/
https://habr.com/ru/companies/clrium/articles/439490/


1. English. 
-----------------------------

1. CLR
------------------------------

1. Assembly?                     Unit of modules and resource files. 
2. How CLR excutes the code?     It compiles on fly on demand 
3. IL and verification
4. Casting between types.        Cast only to base type. 
5. Difference between is/as.     
6. Closure. 


2. Types. 
-------------------------------------

1. Reference vs Value types.     Both inherit interfaces. 
2. Why Value Types are sealed?   
3. Boxing/unboxing. 
4. What will happen if value type is converted to interface.
5. Encapsulation, Inheritance and polimorphism?
6. Can polimorphism be implemenetd via interfaces? 
7. override vs new?
8. constants vs field? 
9. what is Property in C#? how is encapsulation implememted?
10. what is event? How we subscribe? How we raise an event? 
11. event vs delegate?
12. what are generics? 
13. what is Lambda expression? 
14. Interface vs Abstarct class?
15. Base calss vs Interface? Is-A vs Can-Do 
16. String vs StringBuilder
17. throw vs throw new Excpetion?
18. What is finally? 


3. Memory management.
---------------------------------
1. What is managed heap?
2. How GC works and when it occurs? 
3. What triggers GC? 
4. How CLR knows which object can be deleted? 
5. What is compacting phase?
6. What are generations?
7. What is IDisposable? using


4. CLR Hosting. 
-----------------------------------
1. AppDomain, Processes, Threads. 
2. Whats is serialization?


5. Multithreading. 
--------------------------------
1. What is Thread? Thread vs Process
2. How to start thread?
3. What is Thread pool? Thread poll queue.  ThreadPool.QueueUserWorkItem(ComputeBoundOp, 5);
4. What is thread execution context? Thread logical call context. 
5. What are tasks?  Task has ability to return result and we know when task is finished. 
6. How to start a new task after previous task has completed? 
7. What are async functions. Async/Await? 
8. Thread syncronization. SpinLock, 


6. Data Structures
---------------------------------
1. Stack/Queue/Linked List/ Hashtable


7. Patterns
------------------------
1. What Patterns do you know? 
2. Singleton, 
3. Abstract Factory. 


8. SOLID.
-----------------------


9. Web Api
------------------------
1. Whats is REST?
2. Difference betwenn RPC and REST?
3. Maturity Model 
   0 - RPC, SOAP, one http method, one uri. 
   1 - Many Uris, resources, one http method. 
   2 - use http verbs. 
   3 - hypermedia.
4. Http Request structure.
5. HttpMessage lifecycle in Web Api? 
     Delegating handlers
     Routing Dispatcher
     Controllers 
	 Authorization filter. 
	 Model Binding.
	 Formatter binfing.
	 parameter binding. 
     Result Conversion. 
6. What is routing? 
7. How to secure Web.Api? 
8. Token-based authentication.
9. Content negotiation. 
10. Media formatter. 



10. Database
---------------------
1. ACID.
2. Transaction. 


11. Java Script
-----------------------
1. Closure. 
2. Is JavaScript multithreaded. 
3. How does Ecma Script implement multithreading. 
4. Hoisting. 

12. Angular
----------------------


13. Functional programming
----------------------------

14. TypeScript.
-----------------------
1. Difference between React and Angular. 
2. Pattern MVC.
3. Is React full MVC? 
4. Bubbling events. 


Answers 

5 Difference between is/as.
----------------------------------------
  IS - Is Operator is used to Check the Compatibility of an Object with a given Type 
       and it returns the result as a Boolean (True Or False).
  AS - As Operator is used for Casting of Object to a given Type or a Class.
   
6. Closure. 
---------------------------------
  A closure is a particular type of function that is intrinsically linked to the environment in which it is referenced. 
  As a result, closures can use variables pertaining to the referencing environment, 
  despite these values being outside the scope of the closure.  
 
 [CompilerGenerated]
 private sealed class <>c__DisplayClass0_0
 {
    public int x;
    internal void <M>b__0()
    {
        Console.WriteLine(string.Format("The value of x is: {0}", x));
    }
 }
 
 For a lambda to remain “callable,” the variables it references must survive even 
 after the function in which they have been defined has finished executing. 
 To achieve this, C# draws on classes. 
 
 So, when a lambda function accesses a variable that is defined inside a function, 
 that variable is extracted and placed inside a new class generated by the compiler. 
 That’s exactly how a closure works!

7. Reference vs Value types.
-------------------------------------------
Difference1: 
  - Each variable, class or structure fields or method parameters 
    that take a reference type store a reference to a value;
  - But each variable, class or structure fields or method parameters 
    that take a value type store a value exactly, i.e. an entire structure.
  - Both subclasses can inherit the object type and become its representatives.
  
Difference2:
  Overridable methods and inheritance
  
The next big difference between the two types is the lack of virtual
methods table in structures. This means that:

 - You cannot describe and override virtual methods in structures.
 - A structure cannot inherit another one. 
   The only way to emulate inheritance is to put a base type structure in the first field. 
   The fields of an “inherited” structure will go after the fields of a “base” structure 
   and it will create logical inheritance. 
   The fields of both structures will coincide based on the offset.
   You can pass structures to unmanaged code. 
   However, you will lose the information about methods. 
   This is because a structure is just space in memory, 
   filled with data without the information about a type. 
   You can pass it to unmanaged methods, 
   for example, written in C++, without changes.  
   
You cannot do this with classes as they have two inaccessible fields. 
These are SyncBlockIndex and a virtual methods table address.

public void ChangeTo(ref FooStruct strukt, int val)
{
    strukt.x = val;
}

The capability to point to the position of elements:

Difference3:
  The difference in allocation.
  When one declares a variable in the body of a method, 
  the time of memory allocation for a structure is close to zero.
  
When to use: 
  A structure is your choice if a type passes the data in method calls (as returned values or as a method parameter) 
  and there is no need to refer to the same value from different places. 
  The perfect example is tuples. 
  If a method returns several values using tuples, it will return a ValueTuple, declared as a structure. 
  The method won’t allocate space on the heap, but will use the stack of the thread, 
  where memory allocation costs nothing.

  If you design a system that creates big traffic of instances that have small size and lifetime,
  using reference types will lead either to a pool of objects.
  
  Sometimes you use a big size structure as a source of data and place it as a field in a class, 
  while having one copy replicated to produce a thousand of instances.  
  
  For the same reason you should avoid passing big structures through a series of method calls. 
  If all elements call each other, these calls will take more space on the stack 
  and bring your application to death by StackOverflowException. 
  The next reason is performance. The more copies there are the more slowly everything works.
  
The Object base type and implementation of interfaces. Boxing
    
  when calling an instance method for a value type, 
  the method gets another structure that is a copy of an original. 
  That means calling an instance method is like calling a static method:
    Method(ref structInstance, newInternalFieldValue). 
	
  Indeed, this call passes this, with one exception, however. 
  A JIT should compile the body of a method, so it would be unnecessary to offset structure fields, 
  jumping over the pointer to a virtual methods table, which doesn’t exist in the structure. 
  It exists for value types in another place.
  
When boxing happens:

  - the CLR allocates space on the heap for a structure + SyncBlockIndex + VMT of a value type 
    (to call ToString, GetHashCode, Equals);
  - it copies an instance of a value type there
  
Just look at what happens if you use a structure which implements an interface using the same interface.
 
 struct Foo : IBoo
 {
    int x;
    void Boo()
    {
        x = 666;
    }
 }

 IBoo boo = new Foo();
 boo.Boo();
 
 The main problem of boxing is creating traffic in memory. 
 The traffic of unknown number of objects, 
 the part of which can survive up to generation one,
 where we get problems with garbage collection
 
 The main problem of boxing is creating traffic in memory. 
 The traffic of unknown number of objects, the part of which can survive up to generation one, 
 where we get problems with garbage collection.
 
 Why it is not possible to do boxing on stack instead of the heap, 
 when you call a method that takes an object type, which is a value type in fact?
 
   If the value type boxing is done on the stack and the reference will go to the heap, 
   the reference inside the method can go somewhere else, 
   for example a method can put the reference in the field of a class. 
   The method will then stop, and the method that made boxing will also stop. 
   As a result, the reference will point to a dead space on the stack.

---------------------------------------------   
8. Why Value Types are sealed?   

Because each instance of value-type hase different size and stored on the stack. 
So, if you write "Base = Derived" where "Base" and "Derived" 
are value-types you will corrupt stack.

The reason is that most inheritance techniques relate to runtime polymorphism (virtual functions) 
and those don’t work on value types: 
for runtime polymorphism to have any meaning, 
objects need to be treated as references 
– this isn’t specific to .NET either, 
it’s simply a technical detail of how virtual functions are implemented.

Value types form an exception to .NET’s rule, 
precisely to allow lightweight objects 
that don’t require indirection via references.

You could cast from a derived struct to the base, since they would overlap the same memory.
No, this would not be possible – casting a value type would copy its value. 
We’re not dealing with references here, so no overlap in memory. 

In C++, you can actually cause this behaviour. 
For that reason, OOP in C++ only works on pointers and references, not on value types directly. 
And for that same reason, .NET only allows inheritance of reference types
because you couldn’t use it for value types anyway.

Now, .NET could theoretically allow you to inherit a struct from a class














 
 

 



 
  
  
  
  
  
  
  
  
  






	
  





