
1. with

If you need to write expressions like this a number of times, 
you can use the with statement to add the form object to the scope chain:

 with(document.forms[0]) {
   // Access form elements directly here. For example:
   name.value = "";
   address.value = "";
   email.value = "";
 }
 
2. Prototype. 

var o1 = Object.create({x:1, y:2});       // o1 inherits properties x and y
var o2 = Object.create(null);             // o2 inherits no props or methods
var o3 = Object.create(Object.prototype); // o3 is like {} or new Object().

// inherit() returns a newly created object that inherits properties 
// from the prototype object p. 
// It uses the ECMAScript 5 function Object.create() 
// if it is defined, and otherwise falls back to an older technique.

function inherit(p) 
{
   if (p == null) throw TypeError();      // p must be a non-null object
   if (Object.create)                     // If Object.create() is defined...
       return Object.create(p);           // then just use it.
	  
   var t = typeof p;                      // Otherwise do some more type checking
   if (t !== "object" && t !== "function") 
       throw TypeError();
	  
   function f() {};                       // Define a dummy constructor function.
   f.prototype = p;                       // Set its prototype property to p.
   return new f();                        // Use f() to create an "heir" of p.
}







 