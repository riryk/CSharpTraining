
https://careers.google.com/how-we-hire/#step-your-resume

------------------------------------------------------------------

 Title
 
------------------------------------------------------------------
 
 Senior NET Software Engeneer with 10+ years of experience leading and delevoping 
 complex distributed applications within financial business domain using wide 
 range of technologies from legacy ASP WebForms to AWS Cloud

 Proven ability to:
  - Design software architecture 
  - Design Web APIs
  - Integrate complex systems 
  - Migrate on-prem applications to AWS Cloud
  - set up CI/CD
  - Work within globally distributed and multi-cultural teams
  - Teach and develop team members 
  
 Key achivements: 
  - Designed and developed reliable event driven integration with IssueNet 
    to directly connect BuySide investors with Syndicate banks 
	which resulted into large number of new investors and banks in the system
  - Migrated on-prem Microservices and BuySide WebSite to NET Core and AWS Cloud
    which reduced hosting cost on 50%
  - Designed and developed Equity Deal integration service applying CQRS pattern with NET Core and AWS Lambdas
    which improved performace and increased availability. 

•	.NET developer with more than 10 years of IT experience (software design, development, auto-testing and database)
•   Roles on the project: Key developer
•   Key business domain: Capital market, Fixed Income Management, Banking
•	Key languages and technologies: C#, ASP.NET, SQL Server, Postgres
•	Proven practical experience with .NET development (Back-End, Data Access, Front-End)
•   Proven success record of migration on-prem .NET 4.8 service to AWS Cloud (.NET Core and deploy to AWS ECS)
•   Hands on experience in development of scalable, fault-tolerant distributed systems
•	Worked as a member of globally distributed and cross-functional team
•   Highly reliable person who always strives for excellence
•   Experience in teaching, developing, consulting team members

- Proven success record of migration on-prem .NET 4.8 service to AWS Cloud (.NET Core and deploy to AWS ECS)
- Experienced in business domains: Financing, Banking, Capital Markets.
- Key business domain: Capital market, Fixed Income Management
- Worked as a member of globally distributed and cross-functional team

-----------------------------------------------------------------

 IHS Markit project 

-----------------------------------------------------------------

Investor Access platform is suite of solution to provide electronification 
and automation of the Fixed Income marketplace. 
It allows investors and syndicate banks to exchange information 
in real-time electronically which increased market efficiency and reduced operational risk.

Responsibilities

•	Designed and developed Investor Access Net, 
    the core service which connects Buy Side investors with syndicate banks.	
•	Designed and developed BuySide portal, the world-class web portal 
    that allows investors to communicate orders.
•	Served as first point of contact while resolving production issues with Investor Access Net.
•	Wrote integration, Api and UI tests which significantly reduced bugs.
•	Implemented live updates on BuySide portal using SignalR 
    which allowed investors to receive order book changes in browser.
•	Designed and implemented Service-Oriented Asp.Net Core Back-End 
    for Primary Order Management platform which allows investors to manage orders 
	and allocations across its account hierarchy. 
•	Developed UI components using cutting edge Front-End technologies such as Angular, Redux.
•	Developed Integration between Microservices via Kafka and RabbitMQ.

Example: 

- Integrated external web service system on HTTPS with 
  sertificates for both Client and Server 
- Developed communication between the applications using JMS transport 
- Analyzed and documented defects using bug tracking tools 
- Created design artifacts and documented the solution 

My responsibilities: 

• Integrated BuySide Web platform with Fixed Income IssueNet information exchange system
• Designed and developed Microservices for Primary Order Management
• Implemented Financial Information eXchange protocol for Investors
• Integrated Investor Access services with Bloomberg vendor
• Integrated BuySide Web platform with Equity and Muni bookbuild systems
• Migrated on-prem .NET 4.8 services into Cloud (AWS, .NET Core, ECS, PosgreSQL)
• Integrated AWS Quicksight Business Intelligence into BuySide
• Adjusted CI/CD for Microservices
• Created design artifacts and documented the solutions 
• Conducted training sessions for colleagues from India 

--------------------------------------------------------------------- 
  Ukrposhta
---------------------------------------------------------------------  

  Ukrposhta is a Ukrainian state enterprise acting as the biggest national postal operator on Ukrainian market.


Project description

  Mobile Replenishment Service is aimed to provide post clients with ability to replenish mobile phones. 
  It intergated with GlobalMoney payment system, which worked directly with mobile operators.
  
  Post Items Data Warehouse is a centralized countrywide service to store millions of post items 
  in the database and build business analitical reports.
  
  Hybrid post online shop provided customes with ability to order postal items online. 
  Clients paid online and then items were delivered to recipients.
  
  
Responsibilities
  •	Designed and developed database to store mobile replenishment data, developed stored procedures, triggers and views.
  •	Developed Data Access Layer.
  •	Developed ASP.NET web site to adjust mobile replenishment process and build reports.
  •	Designed and developed central WCF service across Ukraine to process mobile replenishment 
    requests and integrate with GlobalMoney service.
	 
 •	Designed database to store  post items.
 •	Wrote stored procedures and triggers to manipulate data in the warehouse.
 •	Developed Windows multithreaded console application to colelct data from ftp and import it to the data warehouse.
 •	Wrote SQL queries to analyze data and built reports.
 •	Developed ASP.NET Web Site to view reports
 
 •	Designed and developed database for Hybrid post web site.
 •	Developed stored procedures.
 •	Developed ASP.NET web site to upload letters.
 •	Implemented integration with one eCommerce provider to allow clients to pay online.

-----------------------------------
 Ideas 
-----------------------------------
1. Add a note for Disater recovery testing scripts. Ia-Infrastructure and BuySide infrastructure projects 
2. Add AWS SNS/SQS experience
3. Add solved .NET performace and memory leak issues. 
4. Add solved Slow Db queries optimization
5. Add solved slow Entity Framework queries. 
6. Examples how we soled db dead locks. 
7. Add Docker containerization to experience
8. Add CI/CD examples. Azure Devops, git hub, TeamCity, Sonar Qube
9. Check experience with GraphQL 
10. Examples of AWS VPCs on Investor Access program 
11. Microservices and SOA examples. 
12. DDD approach
13. Check AWS Event Bridge
14. Check AWS Aurora.
15. Read about low level network for distributed systems.
16. Check WebSocket gateway project and IpreoAlerts project. If no, check AWS solution.  
17. Net Core syncronization context in async await.
18. Local setup and run for Lambdas.
19. Задача літкод. визначити цикл більш цікава - визначити цей цикл за мінімум ітерацій
20. ПМБУК. 
21. Back-End for Frontend plus microservices architecture Draw Muni-Bff or POM-Bff diagrams 
22. Software leadership skills. Amazon leadership questions. Check Epam trainings
23. Write Dispose pattern 
24. Write Singleton pattern 
25. SafeHandle. 
26. Check IaDocuments and virus scanner project 
27. How RabbitMQ is deployed to AWS 
28. Check MemoryStream polling in C# to avoid LOH allocation. MemoryStream from network.
29. ASP.NET Core Cache. ETag header.
30. weak reference
31. list.RemoveAll(x => isPair(x));  Enumerable. Understand why O(n)
32. distinct vs HashSet add to remove duplicates
33. Check Redis for user claims and user session. Fault tolerance if redis not accessible
34. AWS Api gateway rate limiting
35. What is SSO? 
------
36. Architecture. 
    Read Software architecture is practise, Documenting software architectures 
	Release it. Patterms for fault tolerace 
	NoSql distilled, Continuous delivery 
	Devops. Software architect perspective 
37. Review Powershell gallery 
38. Phases of software  development. Inception. 
39. Tiers versus layers
40. Microservices vs SOA 
41. AWS Step Functions? 
42. IAN get orders optimization.
43. Strangler pattern for splitting monolith
44. Lambdas vs Fargate docker containers.
45. Architecture governance 
46. CI vs CDelivery deployment 
47. Zero downtime solutions 
48. Lua script/ sorted sets in Redis to solve Race condition is redis for performance counter
49. clean architecture. https://habr.com/ru/articles/653421/ 
    oop vs functional programming
50. EngX Self-Evaluation.
51. Check internals 
      ConcurrentBag<T>—unordered collection
      ConcurrentDictionary<TKey, TValue>—key/value pairs
      ConcurrentQueue<T>—first-in/first-out queue
      ConcurrentStack<T>—last-in/first-out stac
52. Fallacies of Distributed Computing
53. Microservices. Distributed transaction. 
    TransactionScope. Distributed Transaction Coordinator. 
54. Read book Clean architecture
55. Learn patterns: 
    data management (e.g.,CQRS, event sourcing, materialized views), and error handling (e.g., Retry Pattern)
56. https://udidahan.com/2011/10/02/why-you-should-be-using-cqrs-almost-everywhere/
57. Strangler pattern 
    https://www.redhat.com/architect/pros-and-cons-strangler-architecture-pattern#:~:text=The%20Strangler%20pattern%20is%20one,system%20pass%20through%20the%20facade.
58. IEnumerable vs IQueryable 
59. 
	
	
	

	
	







   
 

	



  






